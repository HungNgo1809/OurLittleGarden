using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine.UI;

public class ExploitPhoton : MonoBehaviour
{
    public float hp;

    public ExploitTool[] exTool;

    public Material[] mats;

    public bool trigger;

    public float curDamage;

    public DataManager dataManager;
    public LargeMapData largeMapData;

    public GameObject BasePrefab;

    public ParticleSystem exploit_PS;
    public ParticleSystem leaf_PS;
    public ParticleSystem done_PS;

    bool isComplete;

    public Slider hpSlider;

    public AudioSource exploitSound;
    public AudioSource destroySound;
    //public PhotonView photonView;
    private void Start()
    {
        //done_PS.Stop();
    }

    /*
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.tag == "Player" && other.GetComponent<PhotonView>().IsMine && CheckCurTool(other.GetComponent<HandButtonManager>().curToolSpeType))
        {
            trigger = true;
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.gameObject.tag == "Player" && other.GetComponent<PhotonView>().IsMine && CheckCurTool(other.GetComponent<HandButtonManager>().curToolSpeType))
        {
            trigger = false;
        }
    }

    private void OnTriggerStay(Collider other)
    {
        if (other.gameObject.tag == "Player" && other.GetComponent<PhotonView>().IsMine && CheckCurTool(other.GetComponent<HandButtonManager>().curToolSpeType))
        {
            trigger = true;

            if (hp <= 0f && !isComplete)
            {
                done_PS.Play();
                Debug.Log(done_PS.isPlaying);
                ExploitComplete();
            }
        }

        if (trigger)
        {
            if (Input.GetButtonDown("Interact") && curDamage > 0f)
            {
                Vector3 direction = new Vector3(this.transform.position.x, other.transform.position.y, this.transform.position.z) - other.transform.position;
                other.transform.rotation = Quaternion.LookRotation(direction, Vector3.up);

                //other.transform.LookAt(this.transform);
                other.GetComponent<Animator>().SetTrigger("Exploit");

                ExpoitAction(curDamage);

                StartCoroutine(delayVFX(leaf_PS));
            }
        }
    }
    */
    public bool CheckCurTool(string speType)
    {
        foreach (ExploitTool tool in exTool)
        {
            if (tool.toolSpeType == speType)
            {
                curDamage = tool.damage;
                return true;
            }
        }
        return false;
    }
    public void UpdateHpBar()
    {
        if(hpSlider!=null)
        hpSlider.value = hp;
    }    
    public void ExpoitAction(float damage)
    {
        hp = hp - damage;
        UpdateHpBar();

        if(leaf_PS != null)
        {
            StartCoroutine(delayVFX(leaf_PS));
        }
        if (exploit_PS != null)
        {
            StartCoroutine(delayVFX(exploit_PS));
        }
    }
    public void ExploitComplete()
    {
        if(!isComplete)
        {
            StartCoroutine(DestroyVfx());
            isComplete = true;

            foreach (Material mat in mats)
            {
                if (mat.number > 0)
                {
                    for (int i = 0; i < mat.number; i++)
                    {
                        if (DisplayInventory.Instance.SearchFirstEmptyUiSlot() != null)
                        {
                            dataManager.AddItemToInventoryData(mat.itemId, mat.type, mat.speType, mat.durability, int.Parse(DisplayInventory.Instance.SearchFirstEmptyUiSlot().name), mat.quickSellMoney);
                        }
                        else
                        {
                            // full túi
                        }

                        DisplayInventory.Instance.ClearAll();
                        DisplayInventory.Instance.UpdateUI();
                    }
                }
            }
            isComplete = true;

            largeMapData.RemoveObjFromData(BasePrefab.name);
            StartCoroutine(DestroyObject());
        }
    }
    IEnumerator DestroyObject()
    {
        yield return new WaitForSeconds(3f);

        Destroy(BasePrefab);
        //photonView.RPC("DestroyObjectOnline", RpcTarget.Others);
    }
    IEnumerator DestroyVfx()
    {
        yield return new WaitForSeconds(1f);

        done_PS.Play();
        destroySound.Play();
        Destroy(GetComponent<MeshRenderer>());
        hpSlider.transform.parent.parent.gameObject.SetActive(false);
    }
    IEnumerator delayVFX(ParticleSystem par)
    {
        yield return new WaitForSeconds(1);

        exploitSound.Play();
        par.Play();
    }

    [System.Serializable]
    public class ExploitTool
    {
        public string toolSpeType;
        public float damage;
    }

    [System.Serializable]
    public class Material
    {
        public string itemId;
        public string type;
        public string speType;

        public float durability;
        public int quickSellMoney;

        public int number;
    }
}
